import org.jetbrains.kotlin.gradle.dsl.JvmTarget
import org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask

buildscript {
    ext.kotlin_version = '1.8.0'
    ext.embedded_kotlin_version = '1.8.0'

    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        google()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

plugins {
    id "io.github.gradle-nexus.publish-plugin" version "1.3.0" //can only be applied to root project
}

apply from: 'versionTasks.gradle'

nexusPublishing {
    repositories {
        sonatype {
            username = "$System.env.SONATYPE_NEXUS_USERNAME"
            password = "$System.env.SONATYPE_NEXUS_PASSWORD"
            stagingProfileId = SONATYPE_STAGING_PROFILE_ID
        }
    }
}

allprojects {
    // The maven-publish plugin seems to be able to find the group and version name by itself
    // but the gradle-nexus publish-plugin can not do this. It is very important to set
    // group and version on the _root_ project or the version name used for publishing
    // to sonatype will be undefined
    group = GROUP
    version = VERSION_NAME

    buildscript {
        repositories {
            mavenCentral()
            maven { url "https://plugins.gradle.org/m2/" }
            google()
            maven { url 'https://maven.pkg.jetbrains.space/kotlin/p/kotlin/bootstrap' }
        }
    }

    repositories {
        mavenCentral()
        google()
        maven { url 'https://maven.pkg.jetbrains.space/kotlin/p/kotlin/bootstrap' }
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
        maven { url 'https://www.jetbrains.com/intellij-repository/snapshots' }
        maven { url 'https://maven.pkg.jetbrains.space/kotlin/p/kotlin/dev/' }
    }

    apply plugin: 'kotlin'
    apply plugin: 'java-library'
    apply plugin: 'idea'
    apply plugin: 'signing'
    apply plugin: 'maven-publish'

    javadoc {
        if(JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }

        if (JavaVersion.current().isJava8Compatible()) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

subprojects {
    task sourcesJar(type: Jar, dependsOn: classes) {
        //noinspection GroovyAccessibility // alternatively replace this with archiveClassifier.set('...')
        archiveClassifier = 'sources'
        from sourceSets.main.allSource, 'build/generated/source/kapt/main', 'build/generated/source/kaptKotlin/main'
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        //noinspection GroovyAccessibility //alternatively replace this with archiveClassifier.set('...')
        archiveClassifier = 'javadoc'
        from javadoc.destinationDir
    }

    afterEvaluate {
        archivesBaseName = POM_ARTIFACT_ID
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                pom {
                    groupId = GROUP
                    artifactId = POM_ARTIFACT_ID
                    version = VERSION_NAME

                    name = POM_NAME
                    packaging = POM_PACKAGING
                    description = POM_DESCRIPTION
                    url = POM_URL

                    from components.java
                    artifact sourcesJar
                    artifact javadocJar

                    scm {
                        url = POM_SCM_URL
                        connection = POM_SCM_CONNECTION
                        developerConnection = POM_SCM_DEV_CONNECTION
                    }
                    licenses {
                        license {
                            name = POM_LICENCE_NAME
                            url = POM_LICENCE_URL
                            distribution = POM_LICENCE_DIST
                        }
                    }
                    developers {
                        developer {
                            id = POM_DEVELOPER_ID
                            name = POM_DEVELOPER_NAME
                        }
                    }
                }
            }
        }
    }

    signing {
        // Skip signing if publishing to mavenLocal and credentials are not available
        required { !gradle.taskGraph.hasTask("publishToMavenLocal") && project.hasProperty("signing.keyId") }

        if (!project.hasProperty("signing.secretKeyRingFile") && !project.hasProperty("signing.password")) {
            /* If in CI, the signing password and signing key are defined in the environment variables
             ORG_GRADLE_PROJECT_signingPassword and ORG_GRADLE_PROJECT_signingKey
             (https://blog.solidsoft.pl/2020/06/03/simpler-and-safer-artifact-signing-on-ci-server-with-gradle/,
             https://stackoverflow.com/questions/57921325/gradle-signarchives-unable-to-read-secret-key).
             Otherwise they are defined in the user's home directory gradle.properties.
             */
            useInMemoryPgpKeys(findProperty("signingKey"), findProperty("signingPassword"))
        }

        sign publishing.publications.mavenJava
    }

    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"

        testImplementation group: 'junit', name: 'junit', version: '4.13.2'
        testImplementation "org.mockito:mockito-core:4.7.0"
        testImplementation "org.mockito.kotlin:mockito-kotlin:4.1.0"
        testImplementation "org.assertj:assertj-core:3.24.2"
    }

    sourceCompatibility = 1.8

    tasks.withType(KotlinCompilationTask).configureEach {
        compilerOptions {
            jvmTarget = JvmTarget.JVM_1_8
        }
    }

    if (JavaVersion.current() >= JavaVersion.VERSION_16) {
        test {
            jvmArgs = [
                    "--illegal-access=permit",
                    "--add-opens=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED",
                    "--add-opens=jdk.compiler/com.sun.tools.javac.file=ALL-UNNAMED",
                    "--add-opens=jdk.compiler/com.sun.tools.javac.main=ALL-UNNAMED",
                    "--add-opens=jdk.compiler/com.sun.tools.javac.jvm=ALL-UNNAMED",
                    "--add-opens=jdk.compiler/com.sun.tools.javac.processing=ALL-UNNAMED",
                    "--add-opens=jdk.compiler/com.sun.tools.javac.comp=ALL-UNNAMED",
                    "--add-opens=jdk.compiler/com.sun.tools.javac.tree=ALL-UNNAMED",
                    "--add-opens=jdk.compiler/com.sun.tools.javac.api=ALL-UNNAMED"
            ]
        }
    }
}
